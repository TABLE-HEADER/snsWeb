/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.32
 * Generated at: 2022-05-30 06:37:50 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.view;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.ArrayList;
import bean.User;

public final class error_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(1);
    _jspx_dependants.put("/common/header.jsp", Long.valueOf(1653874899337L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("bean.User");
    _jspx_imports_classes.add("java.util.ArrayList");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("\t<head>\r\n");
      out.write("\t\t<title>エラー</title>\r\n");
      out.write("\t</head>\r\n");
      out.write("\t<body>\r\n");
      out.write("\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	//セッションからユーザー情報を取得
	User user = (User)session.getAttribute("user");

      out.write("\r\n");
      out.write("<table align=\"center\">\r\n");
      out.write("\t<tr>\r\n");
      out.write("\t\t<td style=\"width:40vw\">\r\n");
      out.write("\t\t\t<div align=\"left\"><a href=\"");
      out.print(request.getContextPath() );
      out.write("/mainpage\">\r\n");
      out.write("\t\t\t<img src=\"");
      out.print(request.getContextPath() );
      out.write("/file/kandan.png\" alt=\"kandan\" width=\"298px\" height=\"52px\" style=\"margin: 0 0 0 10px\"></a></div>\r\n");
      out.write("\t\t</td>\r\n");

	//セッション情報によって表示する内容を変更
	if(user != null){

      out.write("\r\n");
      out.write("\t\t<td align=\"right\" style=\"width:55vw\">\r\n");
      out.write("\t\t\t<br><br>\r\n");
      out.write("\t\t\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("/signout\">サインアウト</a><br>\r\n");
      out.write("\t\t</td>\r\n");

	}
	else{

      out.write("\r\n");
      out.write("\t\t<td align=\"center\" style=\"width:35vw\">\r\n");
      out.write("\t\t\t");
if(request.getAttribute("login_failure") != null){ 
      out.write("\r\n");
      out.write("\t\t\t<font color=\"red\">ログインに失敗しました。</font>\r\n");
      out.write("\t\t\t");
} 
      out.write("\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t");

				String userid = "", password = "";

				//クッキーの取得
				Cookie[] userCookie = request.getCookies();

				//クッキーがあるか判定
				if(userCookie != null){
					for(int i = 0 ; i < userCookie.length; i++){
						//クッキーからユーザー情報の取得
						if(userCookie[i].getName().equals("userid")){
							userid = userCookie[i].getValue();
						}
						//クッキーからパスワード情報の取得
						if(userCookie[i].getName().equals("password")){
							password = userCookie[i].getValue();
						}
					}
			}
			
      out.write("\r\n");
      out.write("\t\t\t<form name=\"signin\" action=\"");
      out.print(request.getContextPath());
      out.write("/signin\" method=\"post\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"userid\" placeholder=\"ユーザーID/メールアドレス\" value=\"@");
      out.print(userid );
      out.write("\"><br>\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"password\" placeholder=\"パスワード\" value=\"");
      out.print(password );
      out.write("\"><br>\r\n");
      out.write("\t\t\t</form>\r\n");
      out.write("\t\t</td>\r\n");
      out.write("\t\t<td align=\"right\" style=\"width:20vw\">\r\n");
      out.write("\t\t\t<br>\r\n");
      out.write("\t\t\t<button onclick=\"location.href='");
      out.print(request.getContextPath() );
      out.write("/view/signup.jsp'\" style=\"color:white; background-color:green;\">サインアップ</button><br>\r\n");
      out.write("\t\t\t<button onclick=\"document.signin.submit();return false;\" style=\"color:white; background-color:blue;\">サインイン</button><br>\r\n");
      out.write("\t\t</td>\r\n");

	}

      out.write("\r\n");
      out.write("\t\t<td style=\"width:2vw\"></td>\r\n");
      out.write("\t</tr>\r\n");
      out.write("</table>\r\n");
      out.write("\r\n");
      out.write("<hr align=\"center\" size=\"5\" color=\"blue\" style=\"width:98vw\"></hr>");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t");

		String error = (String)request.getAttribute("error");
		String cmd = (String)request.getAttribute("cmd");
		
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<p align=\"center\">\r\n");
      out.write("\t\t●●エラー●●<br>\r\n");
      out.write("\t\t");
      out.print(error);
      out.write("\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\r\n");
      out.write("\t\t<br>\r\n");
      out.write("\r\n");
      out.write("\t\t<p align=\"center\">\r\n");
      out.write("\t\t");

		if(cmd.equals("mainpage")) {
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("/mainpage\">＜トップへ戻る＞</a>\r\n");
      out.write("\t\t");

		}
		else if(cmd.equals("list")) {
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("/list\">＜お問い合わせ一覧に戻る＞</a>\r\n");
      out.write("\t\t");

		}
		else {
		
      out.write("\r\n");
      out.write("\t\t\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("/signout\">＜サインイン画面へ＞</a>\r\n");
      out.write("\t\t");

		}
		
      out.write("\r\n");
      out.write("\t\t</p>\r\n");
      out.write("\r\n");
      out.write("\t</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
